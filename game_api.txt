Minetest Game API
=================
GitHub Repo: https://github.com/minetest/minetest_game

Introduction
------------
The Minetest Game subgame offers multiple new possibilities in addition to the Minetest engine's built-in API,
allowing you to add new plants to farming mod, buckets for new liquids, new stairs and custom panes.
For information on the Minetest API, visit https://github.com/minetest/minetest/blob/master/doc/lua_api.txt
Please note:
	[XYZ] refers to a section the Minetest API
	[#ABC] refers to a section in this document
	^ Explanation for line above

Default sounds
--------------
Sounds inside the default table can be used within the sounds field of node definitions.

default.node_sound_defaults()
default.node_sound_stone_defaults()
default.node_sound_dirt_defaults()
default.node_sound_sand_defaults()
default.node_sound_wood_defaults()
default.node_sound_leaves_defaults()
default.node_sound_glass_defaults()

Default constants
-----------------
default.LIGHT_MAX
^ The maximum light level (see [Node definition] light_source)

Player API
----------
The player API can register player models and update the player's appearence

default.player_register_model(name, def)
^ Register a new model to be used by players.
 -> name: model filename such as "character.x", "foo.b3d", etc.
 -> def: See [#Model definition]

default.registered_player_models[name]
^ Get a model's definition
 -> see [#Model definition]

default.player_set_model(player, model_name)
^ Change a player's model
 -> player: PlayerRef
 -> model_name: model registered with player_register_model()

default.player_set_animation(player, anim_name [, speed])
^ Applies an animation to a player
 -> anim_name: name of the animation.
 -> speed: frames per second. If nil, default from the model is used

default.player_set_textures(player, textures)
^ Sets player textures
 -> player: PlayerRef
 -> textures: array of textures
 ^ If <textures> is nil, the default textures from the model def are used

default.player_get_animation(player)
^ Returns a table containing fields "model", "textures" and "animation".
^ Any of the fields of the returned table may be nil.
 -> player: PlayerRef

Model Definition
----------------
{
	animation_speed = 30,            -- Default animation speed, in FPS.
	textures = {"character.png", },  -- Default array of textures.
	visual_size = {x = 1, y = 1},    -- Used to scale the model.
	animations = {
		-- <anim_name> = {x = <start_frame>, y = <end_frame>},
		foo = {x = 0, y = 19},
		bar = {x = 20, y = 39},
		-- ...
	},
}

Leafdecay
---------
To enable leaf decay for a node, add it to the "leafdecay" group.

The rating of the group determines how far from a node in the group "tree"
the node can be without decaying.

If param2 of the node is ~= 0, the node will always be preserved. Thus, if
the player places a node of that kind, you will want to set param2=1 or so.

The function default.after_place_leaves can be set as after_place_node of a node
to set param2 to 1 if the player places the node (should not be used for nodes
that use param2 otherwise (e.g. facedir)).

If the node is in the leafdecay_drop group then it will always be dropped as an
item.

Dyes
----
To make recipes that will work with any dye ever made by anybody, define
them based on groups. You can select any group of groups, based on your need for
amount of colors.

#Color groups
-------------
Base color groups:
- basecolor_white
- basecolor_grey
- basecolor_black
- basecolor_red
- basecolor_yellow
- basecolor_green
- basecolor_cyan
- basecolor_blue
- basecolor_magenta

Extended color groups (* = equal to a base color):
* excolor_white
- excolor_lightgrey
* excolor_grey
- excolor_darkgrey
* excolor_black
* excolor_red
- excolor_orange
* excolor_yellow
- excolor_lime
* excolor_green
- excolor_aqua
* excolor_cyan
- excolor_sky_blue
* excolor_blue
- excolor_violet
* excolor_magenta
- excolor_red_violet

The whole unifieddyes palette as groups:
- unicolor_<excolor>
For the following, no white/grey/black is allowed:
- unicolor_medium_<excolor>
- unicolor_dark_<excolor>
- unicolor_light_<excolor>
- unicolor_<excolor>_s50
- unicolor_medium_<excolor>_s50
- unicolor_dark_<excolor>_s50

Example of one shapeless recipe using a color group:
minetest.register_craft({
	type = "shapeless",
	output = '<mod>:item_yellow',
	recipe = {'<mod>:item_no_color', 'group:basecolor_yellow'},
})

#Color lists
------------
dye.basecolors
^ Array containing the names of available base colors

dye.excolors
^ Array containing the names of the available extended colors

Trees
-----
default.grow_tree(pos, is_apple_tree)
^ Grows a mgv6 tree or apple tree at pos

default.grow_jungle_tree(pos)
^ Grows a mgv6 jungletree at pos

default.grow_pine_tree(pos)
^ Grows a mgv6 pinetree at pos

default.grow_new_apple_tree(pos)
^ Grows a new design apple tree at pos

default.grow_new_jungle_tree(pos)
^ Grows a new design jungle tree at pos

default.grow_new_pine_tree(pos)
^ Grows a new design pine tree at pos

default.grow_new_acacia_tree(pos)
^ Grows a new design acacia tree at pos
